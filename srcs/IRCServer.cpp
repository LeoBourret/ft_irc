class IRCServer { // The main structure for this project, contains a network of all users and channels, the epoll wrapper
public:
	

private:


}

class Client { // Generated by IRCServer (or more specifically the epoll wrapper), contains a Socket* for communication, and a string buffer

};

class Message { // IRC Message, maybe see the mrbunel github for this. They made an IRC class, with a nested Message class, with a bunch of nested classes for each type of message. This is useful since messages will always be made with the same format, so you can have a class with only static members that can be called anywhere

};



class Network { // Stores User and Channel maps, has methods to add and remove user and channels

};

class User { // An IRC User. Has attributes like nickname, username, list to all connected channels, usermode, client (see Client class) etc, methods to edit the user, methods to send a message to corresponding client, retrieve sd, and others

};

class Channel { // An IRC Channel. Has attributes like channel mode, user list, methods like triggering a send message to each user, marking users, removing or adding a user to its list...

};
